{"id":"services/game.js","dependencies":[{"name":"D:\\Development\\draw-with-friends-api\\package.json","includedInParent":true,"mtime":1599013830486},{"name":"../socket.js","loc":{"line":1,"column":19},"parent":"D:\\Development\\draw-with-friends-api\\services\\game.js","resolved":"D:\\Development\\draw-with-friends-api\\socket.js"},{"name":"./global","loc":{"line":3,"column":23},"parent":"D:\\Development\\draw-with-friends-api\\services\\game.js","resolved":"D:\\Development\\draw-with-friends-api\\services\\global.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst io = require('../socket.js').getio();\n\nconst _ = require('lodash');\n\nconst global = require('./global');\n\nconst LOG = true; // socket events\n\nio.on('connection', socket => {\n  socket.on('mousemove', mouseMove);\n  socket.on('guess', guess);\n}); // actions\n\nfunction startGame(room) {\n  log('start', room.roomid); // wait for users to redirect to game page\n\n  setTimeout(() => {\n    room.game = room.game(room, () => endGame(room));\n  }, 1000);\n  broadcastStartGame(room);\n}\n\nfunction endGame(room) {\n  log('end', room.roomid);\n  brodcastEndGame(room);\n} // event handlers\n\n\nfunction mouseMove(data) {\n  let room = global.rooms[data.roomid];\n\n  if (room !== undefined) {\n    for (const client of room.sockets) {\n      client.emit('moving', data);\n    }\n  }\n}\n\nfunction guess(data) {\n  log('guess', data.roomid, data.userid);\n  let room = global.rooms[data.roomid];\n  let user = room.users[data.userid];\n\n  if (room !== undefined) {\n    user.guesses.push({\n      guess: data.guess\n    }); // send guess to game obj\n\n    room.game.guess(data, doesMatch => {\n      user.match = doesMatch;\n\n      if (doesMatch) {\n        user.score++;\n      }\n    });\n    broadcastRoomUpdate(room);\n  }\n} // broadcasts\n\n\nfunction broadcastStartGame(room) {\n  for (const client of room.sockets) {\n    client.emit('game_start');\n  }\n}\n\nfunction brodcastEndGame(room) {\n  for (const client of room.sockets) {\n    client.emit('game_over');\n  }\n}\n\nfunction broadcastRoomUpdate(room) {\n  log('broadcast-room-update', room.roomid);\n\n  for (const client of room.sockets) {\n    client.emit('update_room', formatRoom(room));\n  }\n} // helpers\n\n\nfunction log(message, roomid, userid) {\n  if (LOG) {\n    if (userid) {\n      console.log(`game:${message}`, roomid, userid);\n    } else {\n      console.log(`game:${message}`, roomid);\n    }\n  }\n}\n\nfunction formatRoom(room) {\n  return _.cloneDeep(_objectSpread(_objectSpread({}, room), {}, {\n    game: null,\n    sockets: []\n  }));\n}\n\nmodule.exports = {\n  startGame\n};"},"sourceMaps":null,"error":null,"hash":"154251d476fdd3ff527cb6f058a885cf","cacheData":{"env":{}}}