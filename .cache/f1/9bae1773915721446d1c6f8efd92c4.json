{"id":"game-loop.js","dependencies":[{"name":"D:\\Development\\draw-with-friends-api\\package.json","includedInParent":true,"mtime":1599100314966},{"name":"./words.json","loc":{"line":2,"column":22},"parent":"D:\\Development\\draw-with-friends-api\\game-loop.js","resolved":"D:\\Development\\draw-with-friends-api\\words.json"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst _ = require('lodash');\n\nconst words = require('./words.json');\n\nconst LOG = true; // intervals\n\nlet timerInterval = null; // vars\n\nconst defaultGameState = {\n  started: false,\n  event: '',\n  timer: 0,\n  word: '',\n  round: 1,\n  roundEnd: 5,\n  turn: 1,\n  turnEnd: 2,\n  turnLength: 10,\n  turnUser: {}\n};\n\nconst game = function (room, endGame) {\n  function gameStop() {\n    clearTimer();\n    room.gameState = _.cloneDeep(defaultGameState);\n    broadcastGameUpdate();\n  }\n\n  function gameStart() {\n    log('start'); // init game state\n\n    room.gameState = _.cloneDeep(defaultGameState);\n    room.gameState.turnEnd = Object.keys(room.users).length;\n    room.gameState.started = true;\n    loopRounds();\n  }\n\n  function gameEnd() {\n    log('end');\n    endGame();\n  } // loop\n\n\n  function loopRounds() {\n    if (room.gameState.round <= room.gameState.roundEnd) {\n      roundStart();\n    } else {\n      gameEnd();\n    }\n  } // round\n\n\n  function roundStart() {\n    log('round-start', `${room.gameState.round}/${room.gameState.roundEnd}`);\n    room.gameState.event = 'round-start'; // reset vars\n\n    room.gameState.turn = 1; // each user takes a turn after 3 second delay\n\n    startTimer(3, loopTurns); // broadcast update\n\n    broadcastGameUpdate();\n  }\n\n  function roundEnd() {\n    log('round-end');\n    room.gameState.event = 'round-end';\n    room.gameState.round++; // loop back\n\n    loopRounds(); // broadcast update\n\n    broadcastGameUpdate();\n  } // loop\n\n\n  function loopTurns() {\n    if (room.gameState.turn <= room.gameState.turnEnd) {\n      preTurnStart();\n    } else {\n      roundEnd();\n    }\n  } // turn\n\n\n  function preTurnStart() {\n    log('pre-turn'); // update vars\n\n    room.gameState.event = 'turn-pre';\n    room.gameState.word = getRandomWord();\n    room.gameState.turnUser = getUserAtIndex(room.gameState.turn, room); // reset all mactches\n\n    resetRoomMatches(room); // end turn after turn length\n\n    startTimer(2, turnStart); // broadcast update\n\n    broadcastGameUpdate();\n  }\n\n  function turnStart() {\n    log('start-turn'); // set event\n\n    room.gameState.event = 'turn-start'; // end turn after turn length\n\n    startTimer(room.gameState.turnLength, turnEnd); // broadcast update\n\n    broadcastGameUpdate();\n  }\n\n  function turnEnd() {\n    log('end-turn'); // update vars\n\n    room.gameState.event = 'turn-end'; // loop back\n\n    startTimer(3, () => {\n      room.gameState.turn++;\n      clearBoard();\n      loopTurns();\n    }); // broadcast update\n\n    broadcastGameUpdate();\n  } // guessing\n\n\n  function guess(data, cb) {\n    let roundWordMatch = data.guess && data.guess.toUpperCase() === room.gameState.word.toUpperCase();\n    cb(roundWordMatch);\n  } // broadcasts\n\n\n  function broadcastGameUpdate() {\n    for (const client of room.sockets) {\n      client.emit('update_game', room.gameState);\n      client.emit('update_room', formatRoom(room));\n    }\n  }\n\n  function broadcastTimer() {\n    for (const client of room.sockets) {\n      client.emit('update_game_timer', room.gameState.timer);\n    }\n  }\n\n  function clearBoard() {\n    for (const client of room.sockets) {\n      client.emit('clear_board');\n    }\n  } // helpers\n\n\n  function startTimer(timerLength, cb) {\n    // set timer length\n    room.gameState.timer = timerLength - 2; // set timer interval\n\n    timerInterval = setInterval(() => {\n      updateTimer(cb);\n    }, 1000);\n  }\n\n  function updateTimer(cb) {\n    if (room.gameState.timer === -1) {\n      clearTimer();\n      cb();\n    } else {\n      broadcastTimer();\n      room.gameState.timer--;\n    }\n  }\n\n  function clearTimer() {\n    if (timerInterval !== null) {\n      clearInterval(timerInterval);\n      timerInterval = null;\n    }\n  }\n\n  function resetRoomMatches() {\n    Object.keys(room.users).forEach(key => {\n      room.users[key].match = false;\n      room.users[key].guesses = [];\n    });\n  } // start game\n\n\n  gameStart(); // expose functions\n\n  return {\n    guess,\n    gameStop\n  };\n};\n\nmodule.exports = game; // helpers\n\nfunction getRandomWord() {\n  return words[Math.floor(Math.random() * words.length)];\n}\n\nfunction formatRoom(room) {\n  return _.cloneDeep(_objectSpread(_objectSpread({}, room), {}, {\n    game: null,\n    sockets: []\n  }));\n}\n\nfunction getUserAtIndex(index, room) {\n  let userid = Object.keys(room.users)[index - 1];\n  return {\n    userid,\n    username: room.users[userid].username\n  };\n}\n\nfunction log(message) {\n  if (LOG) {\n    console.log(`game:${message}`);\n  }\n}"},"sourceMaps":null,"error":null,"hash":"be4863e7073d0d7fef48ecd4ee67a28f","cacheData":{"env":{}}}