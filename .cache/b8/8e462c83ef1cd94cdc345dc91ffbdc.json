{"id":"game-loop.js","dependencies":[{"name":"/Users/birusnt/Development/draw-with-friends-api/package.json","includedInParent":true,"mtime":1598979062184},{"name":"./words.json","loc":{"line":1,"column":22},"parent":"/Users/birusnt/Development/draw-with-friends-api/game-loop.js","resolved":"/Users/birusnt/Development/draw-with-friends-api/words.json"}],"generated":{"js":"const words = require('./words.json');\n\nconst game = function (room, endGame) {\n  let timerInterval = null;\n  let timer = null;\n  let roundCount = room.settings.numberOfRounds;\n  let roundWord = '';\n  let currentTurnIndex = 0;\n\n  function loop() {\n    console.log('game:loop', `${roundCount}/${room.settings.numberOfRounds}`); // create new word\n\n    roundWord = getRandomWord(); // brodcast loop start\n\n    brodcastEvent({\n      event: 'loop_start',\n      turn: getUser(currentTurnIndex),\n      roundWord\n    }); // wait 3 seconds before starting next round\n\n    startTimer(3, startRound);\n  } // actions\n\n\n  function startRound() {\n    console.log('client:round-start');\n    brodcastEvent({\n      event: 'round_start'\n    }); // start round timer\n\n    startTimer(room.settings.roundTimerLength, endRound);\n  }\n\n  function endRound() {\n    console.log('client:round-end');\n    brodcastEvent({\n      event: 'round_end'\n    }); // move round count down, next user turn\n\n    roundCount--; // update turn\n\n    incrementTurnIndex(); // check to see if game is over\n\n    if (roundCount === -1) {\n      endGame();\n    } else {\n      // allow 3 seconds of endtime\n      startTimer(3, loop);\n    }\n  }\n\n  function guess(data, cb) {\n    let roundWordMatch = data.guess && data.guess.toUpperCase() === roundWord.toUpperCase();\n    cb(roundWordMatch);\n  } // helpers\n\n\n  function startTimer(timerLength, cb) {\n    // set timer length\n    timer = timerLength; // set timer interval\n\n    timerInterval = setInterval(() => {\n      updateTimer(cb);\n    }, 1000);\n  }\n\n  function updateTimer(cb) {\n    if (timer === -1) {\n      clearTimer();\n      cb();\n    } else {\n      brodcastTimer();\n      timer--;\n    }\n  }\n\n  function clearTimer() {\n    clearInterval(timerInterval);\n    timerInterval = null;\n    timerCallback = null;\n  }\n\n  function getUser(index) {\n    let user = Object.values(room.users)[index];\n    return user ? user : {};\n  }\n\n  function incrementTurnIndex() {\n    if (currentTurnIndex === 3) {\n      currentTurnIndex = 0;\n    } else {\n      currentTurnIndex++;\n    }\n  }\n\n  function getRandomWord() {\n    return words[Math.floor(Math.random() * words.length)];\n  } // brodcasts\n\n\n  function brodcastTimer() {\n    for (const client of room.sockets) {\n      client.emit('update_game_timer', timer);\n    }\n  }\n\n  function brodcastEvent(event) {\n    for (const client of room.sockets) {\n      client.emit('update_game_event', event);\n    }\n  } // start game\n\n\n  loop(); // expose functions\n\n  return {\n    guess\n  };\n};\n\nmodule.exports = game;"},"sourceMaps":null,"error":null,"hash":"8324e80c33887138072089d046d2c1ec","cacheData":{"env":{}}}