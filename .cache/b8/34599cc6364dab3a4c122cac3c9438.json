{"id":"services/user.js","dependencies":[{"name":"D:\\Development\\draw-with-friends-api\\package.json","includedInParent":true,"mtime":1599100314966},{"name":"../socket.js","loc":{"line":2,"column":19},"parent":"D:\\Development\\draw-with-friends-api\\services\\user.js","resolved":"D:\\Development\\draw-with-friends-api\\socket.js"},{"name":"./global","loc":{"line":4,"column":23},"parent":"D:\\Development\\draw-with-friends-api\\services\\user.js","resolved":"D:\\Development\\draw-with-friends-api\\services\\global.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst LOG = false;\n\nconst io = require('../socket.js').getio();\n\nconst _ = require('lodash');\n\nconst global = require('./global'); // vars\n\n\nconst defaultUser = {\n  userid: '',\n  username: '',\n  roomid: ''\n}; // socket events\n\nio.on('connection', socket => {\n  socket.on('set_user', user => setUser(user, socket));\n  socket.on('disconnecting', () => {\n    // wait for rooms to be disconnected\n    setTimeout(() => {\n      removeUser(socket.userid);\n    }, 100);\n  });\n}); // actions\n\nfunction setUser(user, socket) {\n  log('set-user');\n  socket.id = user.userid;\n  socket.userid = user.userid;\n  global.addUser(_objectSpread(_objectSpread({}, _.cloneDeep(defaultUser)), user));\n}\n\nfunction removeUser(userid) {\n  log('remove-user');\n  global.removeUser(userid);\n} // helpers\n\n\nfunction log(message) {\n  if (LOG) {\n    console.log(`user:${message}`);\n  }\n}"},"sourceMaps":null,"error":null,"hash":"70f1610f349e3a4fd22d778f33075e9d","cacheData":{"env":{}}}