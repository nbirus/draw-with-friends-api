{"id":"services/global.js","dependencies":[{"name":"D:\\Development\\draw-with-friends-api\\package.json","includedInParent":true,"mtime":1599100314966},{"name":"../socket.js","loc":{"line":1,"column":19},"parent":"D:\\Development\\draw-with-friends-api\\services\\global.js","resolved":"D:\\Development\\draw-with-friends-api\\socket.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst io = require('../socket.js').getio();\n\nconst _ = require('lodash');\n\nconst LOG = false; // vars\n\nconst messages = [];\nconst users = {};\nconst rooms = {}; // socket events\n\nio.on('connection', function (socket) {\n  // init\n  broadcastUsers();\n  broadcastRooms();\n  broadcastGlobalMessages(); // events\n\n  socket.on('global_message', addMessage);\n}); // actions\n\nfunction addUser(user) {\n  log('add-user');\n  users[user.userid] = user;\n  broadcastUsers();\n}\n\nfunction removeUser(userid) {\n  delete users[userid];\n  broadcastUsers();\n}\n\nfunction addRoom(room) {\n  log('add-room');\n  rooms[room.roomid] = room;\n  broadcastRooms();\n}\n\nfunction removeRoom(roomid) {\n  delete rooms[roomid];\n  broadcastRooms();\n}\n\nfunction addMessage(data) {\n  messages.push({\n    user: users[data.userid],\n    message: data.message\n  });\n  broadcastGlobalMessages();\n} // broadcasts\n\n\nfunction broadcastUsers() {\n  log('broadcast-users');\n  io.emit('update_users', users);\n}\n\nfunction broadcastRooms() {\n  log('broadcast-rooms');\n  io.emit('update_rooms', formatRooms(rooms));\n}\n\nfunction broadcastGlobalMessages() {\n  log('broadcast-messages');\n  io.emit('global_messages', messages);\n} // helpers\n\n\nfunction log(message) {\n  if (LOG) {\n    console.log(`global:${message}`);\n  }\n}\n\nfunction formatRooms() {\n  let returnRooms = {};\n  let roomids = Object.keys(_.cloneDeep(rooms));\n  roomids.forEach(roomid => {\n    returnRooms[roomid] = formatRoom(_.cloneDeep(rooms[roomid]));\n  });\n  return returnRooms;\n}\n\nfunction formatRoom(room) {\n  return _.cloneDeep(_objectSpread(_objectSpread({}, room), {}, {\n    game: null,\n    sockets: []\n  }));\n} // exports\n\n\nmodule.exports = {\n  addUser,\n  removeUser,\n  addRoom,\n  removeRoom,\n  addMessage,\n  broadcastRooms,\n  rooms,\n  users\n};"},"sourceMaps":null,"error":null,"hash":"be56b52b60e1dd8fe43b6bbf5a349a23","cacheData":{"env":{}}}